package source;
import java.net.http.HttpResponse.ResponseInfo;

import javax.swing.JFrame;
import javax.swing.JLabel;

import org.w3c.dom.views.AbstractView;

import source.City.Citizen;
import source.City.City;
import source.City.Kid;
import source.City.Police;
import source.City.Teacher;
import source.City.Zombie;



/**
 * Mostly created through netbeans GUI designer
 * @author Josh Creasey
 */
public class basicFrame extends javax.swing.JFrame {

    public static boolean bitten = false;
    public static int attemps_remain = 1;

    public static int count = 0;

    public static City atlantis = new City();
    public int progress = 100 / atlantis.residents.size();

    /**
     * Creates new form NewJFrame
     */
    public basicFrame(City test) {
        initComponents(test);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents(City test) {

        speak_btn = new javax.swing.JButton();  // speak to citizen button
        skip_btn = new javax.swing.JButton();   // skip citizen button
        welcome_message = new javax.swing.JLabel(); // message at the top of the "game" window
        progress_bar = new javax.swing.JProgressBar();  // progress bar for user to see how close they are to winning
        citizen_name = new javax.swing.JLabel();
        citizen_photo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        speak_btn.setBackground(new java.awt.Color(0, 153, 153));
        speak_btn.setText("Speak with");
        speak_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speak_btnActionPerformed(evt);
            }
        });

        skip_btn.setBackground(new java.awt.Color(204, 0, 0));
        skip_btn.setText("Skip");
        skip_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skip_btnActionPerformed(evt);
            }
        });

        welcome_message.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        welcome_message.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcome_message.setText("Welcome Label");

        progress_bar.setBackground(new java.awt.Color(132, 162, 201));

        citizen_name.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        citizen_name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        citizen_name.setText("Citizen Name");

        citizen_photo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        citizen_photo.setIcon(new javax.swing.ImageIcon(atlantis.residents.get(count).getPhoto())); // NOI18N
        citizen_photo.setAutoscrolls(true);
        citizen_photo.setBorder(javax.swing.BorderFactory.createLineBorder(null, 10));
        citizen_photo.setMaximumSize(new java.awt.Dimension(400, 600));
        citizen_photo.setMinimumSize(new java.awt.Dimension(300, 400));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addComponent(citizen_photo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(137, 137, 137))
            .addGroup(layout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addComponent(speak_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(skip_btn)
                .addGap(139, 139, 139))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(progress_bar, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(citizen_name, javax.swing.GroupLayout.PREFERRED_SIZE, 775, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(welcome_message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcome_message)
                .addGap(18, 18, 18)
                .addComponent(citizen_photo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(citizen_name)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(speak_btn)
                    .addComponent(skip_btn))
                .addGap(18, 18, 18)
                .addComponent(progress_bar, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>                        

    /**
     * Event occurs when the speak button has been pressed
     * @param evt
     */
    private void speak_btnActionPerformed(java.awt.event.ActionEvent evt) {                                          

        // This means user has decided to talk to the citizen or to play again

        // Check if the current user is classtype Zombie
        if(atlantis.residents.get(count).getClass() != Zombie.class){
            // NOT Zombie so see if we have reached the end of all the citizens
            if(count < atlantis.residents.size()-1){
                if(bitten == false){
                    speak_btn.setText("Speak to");
                    skip_btn.setText("Skip");
                    count++;
                    citizen_photo.setIcon(new javax.swing.ImageIcon(atlantis.residents.get(count).getPhoto()));
                
                    citizen_name.setText(atlantis.residents.get(count).getName());


                    progress = progress + (100 / atlantis.residents.size());
                    progress_bar.setValue(progress);
                }else{
                    speak_btn.setText("Speak to");
                    skip_btn.setText("Skip");
                    bitten = false;
                    
                    citizen_photo.setIcon(new javax.swing.ImageIcon(atlantis.residents.get(count).getPhoto()));
                
                    citizen_name.setText(atlantis.residents.get(count).getName());


                    progress = progress + (100 / atlantis.residents.size());
                    progress_bar.setValue(progress);
                }
            }
                    // The end of the list has been reached. Congratulate the user and close the window
            else{
                speak_btn.setText("Play Again");
                skip_btn.setText("End Game");
                // You Have Won! End of the tour!
                citizen_photo.setIcon(new javax.swing.ImageIcon("Photos\\Congratulations_Clipart_4190.gif")); // set to congrats photo
                citizen_name.setText("Congratulations! You have successfully completed the Game!");
                
                
                bitten = true;
                count = 0;
                progress =0;
                progress_bar.setValue(progress);

                
                //speak_btn.setText("Speak to");
                //skip_btn.setText("Skip");
               
            }
        } // end speaking to non-zombies

        // Zombie has been encountered! This could mean that the user was just bit or has the potential to be bit
        else{
            if(count < atlantis.residents.size()-1){
                // if they speak and they haven't been bitten... they died
                if(bitten == false){
                    // You are Dead!
                    citizen_photo.setIcon(new javax.swing.ImageIcon("Photos\\Skull_Clip_Art_4120.jpg")); // set to congrats photo
                    citizen_name.setText("Game Over... You have been bitten by a Zombie");
                    atlantis.addResident(new Zombie("User's Name Here", "Photos\\Zombie_Clip_Art_33971.jpg"));  // add them to the list of residents as a Zombie
                    // This is where buttons need to change... Add the user as a Zombie to the game
                    speak_btn.setText("Play Again");    // Change speak button to play again
                    skip_btn.setText("End Game");       // change skip to end game
                    bitten = true;
                // otherwise that means that they have already been bitten and have chosen to play again
                }else{
                    // so we will start from the beginning with the same settings as before
                    speak_btn.setText("Speak to");
                    skip_btn.setText("Skip");

                    count = 0;      // reset the counter
                    bitten = false; // give them a second chance to not talk to Zombies
                    progress = 0;
                    progress_bar.setValue(progress);
                    
                    citizen_photo.setIcon(new javax.swing.ImageIcon(atlantis.residents.get(count).getPhoto()));
                    citizen_name.setText(atlantis.residents.get(count).getName());
                }
            }else{
                // if you have successfully evaded the Zombies without being bitten
                if(bitten == false){
                    speak_btn.setText("Play Again");
                    skip_btn.setText("End Game");
        
                    
                    // You Have Won! End of the tour!
                    citizen_photo.setIcon(new javax.swing.ImageIcon("Photos\\Congratulations_Clipart_4190.gif")); // set to congrats photo
                    citizen_name.setText("Congratulations! You have successfully completed the Game!");  

                    progress = 0;
                    progress_bar.setValue(progress);


                }else{
                    speak_btn.setText("Speak to");
                    skip_btn.setText("Skip");
                    count = 0;
                    progress = 0;
                    progress_bar.setValue(progress);
                    bitten = false;
                    atlantis.addResident(new Zombie("User's Name Here", "Photos\\Zombie_Clip_Art_33971.jpg"));  // add them to the list of residents as a Zombie
                    citizen_photo.setIcon(new javax.swing.ImageIcon(atlantis.residents.get(count).getPhoto()));
                    citizen_name.setText(atlantis.residents.get(count).getName());
                }
            
            }
        }   // end speaking to zombies
  
    }  // end speak actions                                       

    /**
     * event occurs when the skip button is pressed
     * @param evt
     */
    private void skip_btnActionPerformed(java.awt.event.ActionEvent evt) {                                         
        
        // This means that the user has decided to not speak to the current city resident.
            // Should I limit skip attempts??  - user could skip all residents and win... doesn't seem fun
        // Check if the current user is classtype Zombie
        // check to see if user has reached the end of the list
        // Not at the end of the list
        
        // user has decided to skip someone in the list
        if(count < atlantis.residents.size() && bitten == false){
            if(count != atlantis.residents.size()-1){
                    count++;    // increase count and display new person
                    citizen_photo.setIcon(new javax.swing.ImageIcon(atlantis.residents.get(count).getPhoto()));
                    
                    citizen_name.setText(atlantis.residents.get(count).getName());
                    
                    progress = progress + (100 / atlantis.residents.size());
                    progress_bar.setValue(progress);
            }else{
                speak_btn.setText("Play Again");
                skip_btn.setText("End Game");
        
                    
                    // You Have Won! End of the tour!
                citizen_photo.setIcon(new javax.swing.ImageIcon("Photos\\Congratulations_Clipart_4190.gif")); // set to congrats photo
                citizen_name.setText("Congratulations! You have successfully completed the Game!");

                bitten = true;
                count = 0;
                progress = 0;
                progress_bar.setValue(progress);
            }
        }
            // The end of the list has been reached. Congratulate the user and close the window
            else{
            
                speak_btn.setText("Play Again");
                skip_btn.setText("End Game");
                this.dispose();

                
            }
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        // And we will add people to the city
        // Create some residents to visit!
        //atlantis.addResident(new Citizen("test name", "C:\\Users\\jcrea\\Downloads\\daredevil-clipart-8.jpg" ));
        atlantis.addResident(new Citizen("Darth Vader", "Photos\\Darth_Vader_Clipart_59769.jpg"));      // new Citizen
        atlantis.addResident(new Kid("Freddie", "Photos\\Children_Clipart_9059.jpg"));              // new Kid
        atlantis.addResident(new Police("DareDevil", "Photos\\daredevil-clipart-8.jpg"));
        atlantis.addResident(new Zombie("Dr. Eat Your Brains","Photos\\Zombie_Clip_Art_33971.jpg")); // New Zombie
        atlantis.addResident(new Teacher("Monkey", "Photos\\37a5a981a5465af6daae83565d7b1812_w200.gif"));
        atlantis.addResident(new Citizen("Thor of Asgard", "Photos\\Thor_Clipart_54441.jpg"));    // new Citizen 
        atlantis.addResident(new Zombie("Kyle", "Photos\\Zombie_Clip_Art_33971.jpg"));
        atlantis.addResident(new Teacher("Princess Peach", "Photos\\Peach_Clip_Art_36634.jpg"));     // New Teacher
        atlantis.addResident(new Citizen("Snoopy", "Photos\\snoopy-dancing.gif")); // New Test Citizen
        atlantis.addResident(new Kid("Avocado", "Photos\\avocado-1113_512.gif"));
        atlantis.addResident(new Police("Spongbob", "Photos\\spongedance-4.gif"));
        atlantis.addResident(new Citizen("Cat", "Photos\\cat.gif"));


        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(basicFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(basicFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(basicFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(basicFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            
                if(bitten == false){
                    new basicFrame(atlantis).setVisible(true);  // Draw the frame
                }
                
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel citizen_name;
    private javax.swing.JLabel citizen_photo;
    private javax.swing.JProgressBar progress_bar;
    private javax.swing.JButton skip_btn;
    private javax.swing.JButton speak_btn;
    private javax.swing.JLabel welcome_message;
    // End of variables declaration                   
}
